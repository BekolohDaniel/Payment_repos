name: Django CI/CD Pipeline

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main
      - staging

jobs:
  test:
    runs-on: ubuntu-latest

    env:
      DJANGO_SETTINGS_MODULE: your_project.settings
      SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }} 
      DEBUG: "False"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-django flake8 coverage gunicorn

      - name: Run migrations
        run: python manage.py migrate --noinput

      - name: Run tests with coverage
        run: |
          coverage run --source='.' manage.py test
          coverage report -m
          coverage xml

      - name: Lint code
        run: flake8 .

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: coverage.xml
          fail_ci_if_error: true

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install gunicorn

      - name: Deploy to Staging Server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.STAGING_SSH_KEY }}
          SERVER_USER: ${{ secrets.STAGING_USER }}
          SERVER_HOST: ${{ secrets.STAGING_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST "
            cd /path/to/staging/project &&
            git pull origin staging || { echo 'Git pull failed, aborting'; exit 1; } &&
            source venv/bin/activate &&
            pip install -r requirements.txt &&
            python manage.py migrate --noinput &&
            python manage.py collectstatic --noinput &&
            systemctl restart staging_gunicorn || { echo 'Service restart failed, aborting'; exit 1; }
          "

  deploy-production:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install gunicorn

      - name: Backup Production
        env:
          SSH_PRIVATE_KEY: ${{ secrets.PROD_SSH_KEY }}
          SERVER_USER: ${{ secrets.PROD_USER }}
          SERVER_HOST: ${{ secrets.PROD_HOST }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST "
            cp -r /path/to/production/project /path/to/production/backup_$(date +%F_%T) || { echo 'Backup failed'; exit 1; }
          "

      - name: Deploy to Production Server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.PROD_SSH_KEY }}
          SERVER_USER: ${{ secrets.PROD_USER }}
          SERVER_HOST: ${{ secrets.PROD_HOST }}
        run: |
          ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_HOST "
            cd /path/to/production/project &&
            git pull origin main || { echo 'Git pull failed, aborting'; exit 1; } &&
            source venv/bin/activate &&
            pip install -r requirements.txt ||
            { echo 'Dependency installation failed, rollback'; exit 1; } &&
            python manage.py migrate --noinput ||
            { echo 'Migration failed, rollback'; exit 1; } &&
            python manage.py collectstatic --noinput ||
            { echo 'Collectstatic failed, rollback'; exit 1; } &&
            systemctl restart your_project_gunicorn ||
            { echo 'Service restart failed, rollback'; exit 1; }
          "
